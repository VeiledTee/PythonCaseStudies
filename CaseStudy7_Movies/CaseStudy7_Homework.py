import pandas as pd
import numpy as np

from sklearn.model_selection import cross_val_predict
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import r2_score

import matplotlib.pyplot as plt

# ----- Exercise 1 ----- #
"""
What is the title of the first movie in this dataset?
"""

df = pd.read_csv("https://courses.edx.org/asset-v1:HarvardX+PH526x+2T2019+type@asset+block@movie_data.csv", index_col=0)

# print(df['title'].iloc[0])  # Avatar

# ----- Exercise 2 ----- #
"""
-> Create a new column in df called profitable, defined as 1 if the movie revenue (revenue) is 
greater than the movie budget (budget), and 0 otherwise.
-> Next, define and store the outcomes we will use for regression and classification. Define 
regression_target as the string 'revenue'. Define classification_target as the string 'profitable'.
-> How many movies in this dataset are defined as profitable (value 1)?
"""
profitable = []
revenueData = df.groupby('revenue')
budgetData = df.groupby('budget')

for index, row in df.iterrows():
    if row['revenue'] > row['budget']:
        profitable.append(1)
    else:
        profitable.append(0)

df['profitable'] = profitable
# print(sum(profitable))  # 2585

# ----- Exercise 3 ----- #
"""
-> Use df.replace() to replace any cells with type np.inf or -np.inf with np.nan.
-> Drop all rows with any np.nan values in that row using df.dropna(). Do any further arguments 
need to be specified in this function to remove rows with any such values?
-> How many movies are left in the dataset after dropping any rows with infinite or missing values?
"""
df = df.replace([np.inf, -np.inf], np.nan)
df = df.dropna()
# print(len(df))  # 1406

# ----- Exercise 4 ----- #
"""
-> Determine all the genres in the genre column. Make sure to use the strip() 
function on each genre to remove trailing characters.
-> Next, include each listed genre as a new column in the dataframe. Each element 
of these genre columns should be 1 if the movie belongs to that particular genre, and 0 otherwise. 
Keep in mind that a movie may belong to several genres at once.
-> Call df[genres].head() to view your results.
-> How many genres of movies are in this dataset?
"""
genreList = df.genres.apply(lambda x: x.split(","))
genres = []

for row in genreList:
    row = [genre.strip() for genre in row]
    for g in row:
        if g not in genres:
            genres.append(g)

for g in genres:
    df[g] = df['genres'].str.contains(g).astype(int)

# print(len(genres))  # 20

# ----- Exercise 5 ----- #
"""
-> Call plt.show() to observe the plot generated by the code given below. Which of the covariates
and/or outcomes are correlated with each other?
-> Call skew() on the columns outcomes_and_continuous_covariates in df. Is the skew above 1 for any
of these variables?
-> Which continuous covariate appears to be the most skewed?
"""

classification_target = 'profitable'
regression_target = 'revenue'

continuous_covariates = ['budget', 'popularity', 'runtime', 'vote_count', 'vote_average']
outcomes_and_continuous_covariates = continuous_covariates + [regression_target, classification_target]
plotting_variables = ['budget', 'popularity', regression_target]

axes = pd.plotting.scatter_matrix(df[plotting_variables], alpha=0.15,
                                  color=(0, 0, 0), hist_kwds={"color": (0, 0, 0)}, facecolor=(1, 0, 0))
# show the plot.
# plt.show()

# determine the skew.
# print(df[outcomes_and_continuous_covariates].skew())
"""
budget          1.754872
popularity      7.968139
runtime         1.059804
vote_count      2.461041
vote_average   -1.080038
revenue         3.084680
profitable     -1.081030
"""

# ----- Exercise 6 ----- #
"""
for budget, popularity, runtime, vote_count, and revenue, transform value x into np.log10(1+x).

What is the new value of skew() for the covariate runtime? Please provide the answer to 3 decimal points.
0.530
"""
df['budget'] = np.log10(1 + df['budget'])
df['popularity'] = np.log10(1 + df['popularity'])
df['runtime'] = np.log10(1 + df['runtime'])
df['vote_count'] = np.log10(1 + df['vote_count'])
df['revenue'] = np.log10(1 + df['revenue'])
# print(df[outcomes_and_continuous_covariates].skew())
"""
budget         -2.816990
popularity     -0.431543
runtime         0.530489
vote_count     -0.677632
vote_average   -1.080038
revenue        -2.177372
profitable     -1.081030
"""

# ----- Exercise 7 ----- #
"""
Use to_csv() to save the df object as movies_clean.csv.

What is the correct way to save the df object?
"""
df.to_csv("movies_clean.csv")
